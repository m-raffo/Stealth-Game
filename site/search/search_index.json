{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"theme: material","title":"Home"},{"location":"cam.js/","text":"Members cam : Object The camera object for the world. Constants CAM_TARGET_HEIGHT : Number The ideal height for the camera, it is adjusted to meet the player's screen dimentions CAM_TARGET_WIDTH : Number The ideal width for the camera, it is adjusted to meet the player's screen dimentions cam : Object The camera object for the world. Kind : global variable cam : Object .x : Number .y : Number .width : Number .height : Number .onScreen(pointX, pointY) \u21d2 Boolean .objectOnScreen(item) \u21d2 Boolean .originX() \u21d2 Number .originY() \u21d2 Number .getOnscreenX(pointX) \u21d2 Number .getOnscreenY(pointY) \u21d2 Number .updateSize() \u21d2 undefined .drawItem(item) \u21d2 undefined .drawLevel(level) \u21d2 undefined cam.x : Number x position of the camera in the world (from the center) Kind : static property of cam Default : 0 cam.y : Number y position of the camera in the world (from the center) Kind : static property of cam Default : 0 cam.width : Number width of the camera (in world units, not pixels) Kind : static property of cam cam.height : Number height of the camera (in world units, not pixels) Kind : static property of cam cam.onScreen(pointX, pointY) \u21d2 Boolean Determines if a point is on screen Kind : static method of cam Returns : Boolean - True if on the screen, False if not Param Type Description pointX Number x coordinate of the point pointY Number y coordinate of the point cam.objectOnScreen(item) \u21d2 Boolean Determines if the object if on the onScreen Kind : static method of cam Returns : Boolean - True if onscreen, False if not Param Type Description item Object the item to be checked cam.originX() \u21d2 Number Returns the x coordinate in the world of the upper-left corner of the camera Kind : static method of cam Returns : Number - x coordinate cam.originY() \u21d2 Number Returns the y coordinate in the world of the upper-left corner of the camera Kind : static method of cam Returns : Number - y coordinate cam.getOnscreenX(pointX) \u21d2 Number Gets the pixel position on the screen for a given x coordinate in the world Returns undefined in the point is not onscreen Kind : static method of cam Returns : Number - The X coordinate of the pixel position on screen Param Type Description pointX Number X coordinate to get cam.getOnscreenY(pointY) \u21d2 Number Gets the pixel position on the screen for a given y coordinate in the world Returns undefined in the point is not onscreen Kind : static method of cam Returns : Number - The Y coordinate of the pixel position on screen Param Type Description pointY Number Y coordinate to get cam.updateSize() \u21d2 undefined Updates the size of the camera to match the size of the window. Aims to keep the screen in a proportion of 1920*1080. Keeps the ratio of the sides square, to prevent dilation in one axis. Kind : static method of cam Returns : undefined - No return value cam.drawItem(item) \u21d2 undefined Draws an item on the screen using the correct scaling and position Kind : static method of cam Returns : undefined - No return value Param Type Description item Object item to be drawn cam.drawLevel(level) \u21d2 undefined Draws the the level to the screen Kind : static method of cam Returns : undefined - no return value Param Type Description level object the level to be drawn CAM_TARGET_HEIGHT : Number The ideal height for the camera, it is adjusted to meet the player's screen dimentions Kind : global constant CAM_TARGET_WIDTH : Number The ideal width for the camera, it is adjusted to meet the player's screen dimentions Kind : global constant","title":"Camera"},{"location":"cam.js/#members","text":"cam : Object The camera object for the world.","title":"Members"},{"location":"cam.js/#constants","text":"CAM_TARGET_HEIGHT : Number The ideal height for the camera, it is adjusted to meet the player's screen dimentions CAM_TARGET_WIDTH : Number The ideal width for the camera, it is adjusted to meet the player's screen dimentions","title":"Constants"},{"location":"cam.js/#cam-object","text":"The camera object for the world. Kind : global variable cam : Object .x : Number .y : Number .width : Number .height : Number .onScreen(pointX, pointY) \u21d2 Boolean .objectOnScreen(item) \u21d2 Boolean .originX() \u21d2 Number .originY() \u21d2 Number .getOnscreenX(pointX) \u21d2 Number .getOnscreenY(pointY) \u21d2 Number .updateSize() \u21d2 undefined .drawItem(item) \u21d2 undefined .drawLevel(level) \u21d2 undefined","title":"cam : Object"},{"location":"cam.js/#camx-number","text":"x position of the camera in the world (from the center) Kind : static property of cam Default : 0","title":"cam.x : Number"},{"location":"cam.js/#camy-number","text":"y position of the camera in the world (from the center) Kind : static property of cam Default : 0","title":"cam.y : Number"},{"location":"cam.js/#camwidth-number","text":"width of the camera (in world units, not pixels) Kind : static property of cam","title":"cam.width : Number"},{"location":"cam.js/#camheight-number","text":"height of the camera (in world units, not pixels) Kind : static property of cam","title":"cam.height : Number"},{"location":"cam.js/#camonscreenpointx-pointy-boolean","text":"Determines if a point is on screen Kind : static method of cam Returns : Boolean - True if on the screen, False if not Param Type Description pointX Number x coordinate of the point pointY Number y coordinate of the point","title":"cam.onScreen(pointX, pointY) \u21d2 Boolean"},{"location":"cam.js/#camobjectonscreenitem-boolean","text":"Determines if the object if on the onScreen Kind : static method of cam Returns : Boolean - True if onscreen, False if not Param Type Description item Object the item to be checked","title":"cam.objectOnScreen(item) \u21d2 Boolean"},{"location":"cam.js/#camoriginx-number","text":"Returns the x coordinate in the world of the upper-left corner of the camera Kind : static method of cam Returns : Number - x coordinate","title":"cam.originX() \u21d2 Number"},{"location":"cam.js/#camoriginy-number","text":"Returns the y coordinate in the world of the upper-left corner of the camera Kind : static method of cam Returns : Number - y coordinate","title":"cam.originY() \u21d2 Number"},{"location":"cam.js/#camgetonscreenxpointx-number","text":"Gets the pixel position on the screen for a given x coordinate in the world Returns undefined in the point is not onscreen Kind : static method of cam Returns : Number - The X coordinate of the pixel position on screen Param Type Description pointX Number X coordinate to get","title":"cam.getOnscreenX(pointX) \u21d2 Number"},{"location":"cam.js/#camgetonscreenypointy-number","text":"Gets the pixel position on the screen for a given y coordinate in the world Returns undefined in the point is not onscreen Kind : static method of cam Returns : Number - The Y coordinate of the pixel position on screen Param Type Description pointY Number Y coordinate to get","title":"cam.getOnscreenY(pointY) \u21d2 Number"},{"location":"cam.js/#camupdatesize-undefined","text":"Updates the size of the camera to match the size of the window. Aims to keep the screen in a proportion of 1920*1080. Keeps the ratio of the sides square, to prevent dilation in one axis. Kind : static method of cam Returns : undefined - No return value","title":"cam.updateSize() \u21d2 undefined"},{"location":"cam.js/#camdrawitemitem-undefined","text":"Draws an item on the screen using the correct scaling and position Kind : static method of cam Returns : undefined - No return value Param Type Description item Object item to be drawn","title":"cam.drawItem(item) \u21d2 undefined"},{"location":"cam.js/#camdrawlevellevel-undefined","text":"Draws the the level to the screen Kind : static method of cam Returns : undefined - no return value Param Type Description level object the level to be drawn","title":"cam.drawLevel(level) \u21d2 undefined"},{"location":"cam.js/#cam95target95height-number","text":"The ideal height for the camera, it is adjusted to meet the player's screen dimentions Kind : global constant","title":"CAM_TARGET_HEIGHT : Number"},{"location":"cam.js/#cam95target95width-number","text":"The ideal width for the camera, it is adjusted to meet the player's screen dimentions Kind : global constant","title":"CAM_TARGET_WIDTH : Number"},{"location":"canvas.js/","text":"","title":"Canvas.js"},{"location":"controls.js/","text":"controls : Object Provides control functionality Allows for easy customization of the controls, and a centralized control system Kind : global variable controls : Object .bindings : Object .isControlPressed(control) \u21d2 Boolean .logControls() \u21d2 undefined controls.bindings : Object Contains the key bindings for all of the controls of the game Kind : static property of controls controls.isControlPressed(control) \u21d2 Boolean Checks if the given control is currently pressed. If a nonexistant control is passed, False is returned Kind : static method of controls Returns : Boolean - True if the key is pressed, False if it is not Param Type Description control String the name of the control (as a string) controls.logControls() \u21d2 undefined Logs all of the controls and if they are currently pressed or not (For debugging) Kind : static method of controls Returns : undefined - No return value","title":"Controls"},{"location":"controls.js/#controls-object","text":"Provides control functionality Allows for easy customization of the controls, and a centralized control system Kind : global variable controls : Object .bindings : Object .isControlPressed(control) \u21d2 Boolean .logControls() \u21d2 undefined","title":"controls : Object"},{"location":"controls.js/#controlsbindings-object","text":"Contains the key bindings for all of the controls of the game Kind : static property of controls","title":"controls.bindings : Object"},{"location":"controls.js/#controlsiscontrolpressedcontrol-boolean","text":"Checks if the given control is currently pressed. If a nonexistant control is passed, False is returned Kind : static method of controls Returns : Boolean - True if the key is pressed, False if it is not Param Type Description control String the name of the control (as a string)","title":"controls.isControlPressed(control) \u21d2 Boolean"},{"location":"controls.js/#controlslogcontrols-undefined","text":"Logs all of the controls and if they are currently pressed or not (For debugging) Kind : static method of controls Returns : undefined - No return value","title":"controls.logControls() \u21d2 undefined"},{"location":"item.js/","text":"Item Kind : global class Item new Item(name, x, y, image, width, height) .name : String .x : Number .y : Number .image : Image .width : Number .height : Number .collisionPlayer : Boolean .collisionBullet : Boolean .collisionSight : Boolean .collisionShape : String .checkCollisionPoint(targetX, targetY) \u21d2 Boolean new Item(name, x, y, image, width, height) The constructor for an item object. Items are things in the world that the player will interact with, but are smaller than rooms or sections. Param Type Description name String the name of the object x Number x position in the world (from center) y Number y position in the world (from center) image String the name of the image (to be loaded from allImages) width Number width of the object height Number height of the object item.name : String Name of the object, mostly for identification purposes Kind : instance property of Item item.x : Number x position of the object in the world (based on the center) Kind : instance property of Item item.y : Number y position of the object in the world (based on the center) Kind : instance property of Item item.image : Image Image for the items Kind : instance property of Item item.width : Number Width of the item Kind : instance property of Item item.height : Number Height of the item Kind : instance property of Item item.collisionPlayer : Boolean Determines if the object collides with the player Kind : instance property of Item Default : true item.collisionBullet : Boolean Determines if the item collides with bullets Kind : instance property of Item Default : false item.collisionSight : Boolean Determines if the item blocks line-of-sight Kind : instance property of Item Default : true item.collisionShape : String Determines the shape for the collision detection box. \"box\" for a box hitbox matching the dimentions of the item \"circle\" for a circular hitbox with a radius of width / 2 Kind : instance property of Item item.checkCollisionPoint(targetX, targetY) \u21d2 Boolean Determines if the given point is in collision with the item Kind : instance method of Item Returns : Boolean - true if there is a collision, false if not Param Type Description targetX Number x position of the point to check targetY Number y position of the point to check","title":"Item"},{"location":"item.js/#item","text":"Kind : global class Item new Item(name, x, y, image, width, height) .name : String .x : Number .y : Number .image : Image .width : Number .height : Number .collisionPlayer : Boolean .collisionBullet : Boolean .collisionSight : Boolean .collisionShape : String .checkCollisionPoint(targetX, targetY) \u21d2 Boolean","title":"Item"},{"location":"item.js/#new-itemname-x-y-image-width-height","text":"The constructor for an item object. Items are things in the world that the player will interact with, but are smaller than rooms or sections. Param Type Description name String the name of the object x Number x position in the world (from center) y Number y position in the world (from center) image String the name of the image (to be loaded from allImages) width Number width of the object height Number height of the object","title":"new Item(name, x, y, image, width, height)"},{"location":"item.js/#itemname-string","text":"Name of the object, mostly for identification purposes Kind : instance property of Item","title":"item.name : String"},{"location":"item.js/#itemx-number","text":"x position of the object in the world (based on the center) Kind : instance property of Item","title":"item.x : Number"},{"location":"item.js/#itemy-number","text":"y position of the object in the world (based on the center) Kind : instance property of Item","title":"item.y : Number"},{"location":"item.js/#itemimage-image","text":"Image for the items Kind : instance property of Item","title":"item.image : Image"},{"location":"item.js/#itemwidth-number","text":"Width of the item Kind : instance property of Item","title":"item.width : Number"},{"location":"item.js/#itemheight-number","text":"Height of the item Kind : instance property of Item","title":"item.height : Number"},{"location":"item.js/#itemcollisionplayer-boolean","text":"Determines if the object collides with the player Kind : instance property of Item Default : true","title":"item.collisionPlayer : Boolean"},{"location":"item.js/#itemcollisionbullet-boolean","text":"Determines if the item collides with bullets Kind : instance property of Item Default : false","title":"item.collisionBullet : Boolean"},{"location":"item.js/#itemcollisionsight-boolean","text":"Determines if the item blocks line-of-sight Kind : instance property of Item Default : true","title":"item.collisionSight : Boolean"},{"location":"item.js/#itemcollisionshape-string","text":"Determines the shape for the collision detection box. \"box\" for a box hitbox matching the dimentions of the item \"circle\" for a circular hitbox with a radius of width / 2 Kind : instance property of Item","title":"item.collisionShape : String"},{"location":"item.js/#itemcheckcollisionpointtargetx-targety-boolean","text":"Determines if the given point is in collision with the item Kind : instance method of Item Returns : Boolean - true if there is a collision, false if not Param Type Description targetX Number x position of the point to check targetY Number y position of the point to check","title":"item.checkCollisionPoint(targetX, targetY) \u21d2 Boolean"},{"location":"level.js/","text":"Classes Level Members currentLevel : Object Reference to the current level the player is on Level Kind : global class Level new Level(name) .name : String .allItems : Array.<Item> .addItem(toAdd) \u21d2 undefined new Level(name) Contains all of the data about the world and the \"stuff\" (items, weapons, etc.) contained within it. Param Type Description name String the name of the level level.name : String Name of the level, for identification purposes Kind : instance property of Level level.allItems : Array.<Item> An array containing all of the items in the world Kind : instance property of Level level.addItem(toAdd) \u21d2 undefined Adds an item to the function Kind : instance method of Level Returns : undefined - no return value Param Type Description toAdd Object the object to add currentLevel : Object Reference to the current level the player is on Kind : global variable","title":"Level.js"},{"location":"level.js/#classes","text":"Level","title":"Classes"},{"location":"level.js/#members","text":"currentLevel : Object Reference to the current level the player is on","title":"Members"},{"location":"level.js/#level","text":"Kind : global class Level new Level(name) .name : String .allItems : Array.<Item> .addItem(toAdd) \u21d2 undefined","title":"Level"},{"location":"level.js/#new-levelname","text":"Contains all of the data about the world and the \"stuff\" (items, weapons, etc.) contained within it. Param Type Description name String the name of the level","title":"new Level(name)"},{"location":"level.js/#levelname-string","text":"Name of the level, for identification purposes Kind : instance property of Level","title":"level.name : String"},{"location":"level.js/#levelallitems-arrayitem","text":"An array containing all of the items in the world Kind : instance property of Level","title":"level.allItems : Array.&lt;Item&gt;"},{"location":"level.js/#leveladditemtoadd-undefined","text":"Adds an item to the function Kind : instance method of Level Returns : undefined - no return value Param Type Description toAdd Object the object to add","title":"level.addItem(toAdd) \u21d2 undefined"},{"location":"level.js/#currentlevel-object","text":"Reference to the current level the player is on Kind : global variable","title":"currentLevel : Object"},{"location":"player.js/","text":"Members player : Object The object for the main player of the game. Constants MOVE_SPEED_WALK : Number The walking speed of the player The average human walking speed is 1.4 meters/second ~ 0.14 cm/millisecond MOVE_SPEED_CROUCH : Number The movement speed of the player when crouched MOVE_SPEED_RUN : Number The movement speed of the player when running ACCEL_SPEED_WALK : Number Number of milliseconds needed to get to full walking speed player : Object The object for the main player of the game. Kind : global variable player : Object .move() \u21d2 undefined .checkCollision() \u21d2 Boolean player.move() \u21d2 undefined Calculates the player's movement based on the currently pressed controls Kind : static method of player Returns : undefined - No return value player.checkCollision() \u21d2 Boolean Determines if the player is colliding with any objects that impeed their movement Kind : static method of player Returns : Boolean - true if colliding, false if not MOVE_SPEED_WALK : Number The walking speed of the player The average human walking speed is 1.4 meters/second ~ 0.14 cm/millisecond Kind : global constant Default : 0.5 MOVE_SPEED_CROUCH : Number The movement speed of the player when crouched Kind : global constant Default : 0.25 MOVE_SPEED_RUN : Number The movement speed of the player when running Kind : global constant Default : 1 ACCEL_SPEED_WALK : Number Number of milliseconds needed to get to full walking speed Kind : global constant Default : 100","title":"Player"},{"location":"player.js/#members","text":"player : Object The object for the main player of the game.","title":"Members"},{"location":"player.js/#constants","text":"MOVE_SPEED_WALK : Number The walking speed of the player The average human walking speed is 1.4 meters/second ~ 0.14 cm/millisecond MOVE_SPEED_CROUCH : Number The movement speed of the player when crouched MOVE_SPEED_RUN : Number The movement speed of the player when running ACCEL_SPEED_WALK : Number Number of milliseconds needed to get to full walking speed","title":"Constants"},{"location":"player.js/#player-object","text":"The object for the main player of the game. Kind : global variable player : Object .move() \u21d2 undefined .checkCollision() \u21d2 Boolean","title":"player : Object"},{"location":"player.js/#playermove-undefined","text":"Calculates the player's movement based on the currently pressed controls Kind : static method of player Returns : undefined - No return value","title":"player.move() \u21d2 undefined"},{"location":"player.js/#playercheckcollision-boolean","text":"Determines if the player is colliding with any objects that impeed their movement Kind : static method of player Returns : Boolean - true if colliding, false if not","title":"player.checkCollision() \u21d2 Boolean"},{"location":"player.js/#move95speed95walk-number","text":"The walking speed of the player The average human walking speed is 1.4 meters/second ~ 0.14 cm/millisecond Kind : global constant Default : 0.5","title":"MOVE_SPEED_WALK : Number"},{"location":"player.js/#move95speed95crouch-number","text":"The movement speed of the player when crouched Kind : global constant Default : 0.25","title":"MOVE_SPEED_CROUCH : Number"},{"location":"player.js/#move95speed95run-number","text":"The movement speed of the player when running Kind : global constant Default : 1","title":"MOVE_SPEED_RUN : Number"},{"location":"player.js/#accel95speed95walk-number","text":"Number of milliseconds needed to get to full walking speed Kind : global constant Default : 100","title":"ACCEL_SPEED_WALK : Number"},{"location":"setup.js/","text":"Members allImages : Object A list of all loaded images Functions setup() \u21d2 undefined The setup function. Does initial setup for the program. Called once by p5.js on the program start allImages : Object A list of all loaded images Kind : global variable setup() \u21d2 undefined The setup function. Does initial setup for the program. Called once by p5.js on the program start Kind : global function Returns : undefined - No return value","title":"Setup.js"},{"location":"setup.js/#members","text":"allImages : Object A list of all loaded images","title":"Members"},{"location":"setup.js/#functions","text":"setup() \u21d2 undefined The setup function. Does initial setup for the program. Called once by p5.js on the program start","title":"Functions"},{"location":"setup.js/#allimages-object","text":"A list of all loaded images Kind : global variable","title":"allImages : Object"},{"location":"setup.js/#setup-undefined","text":"The setup function. Does initial setup for the program. Called once by p5.js on the program start Kind : global function Returns : undefined - No return value","title":"setup() \u21d2 undefined"},{"location":"sketch.js/","text":"draw() \u21d2 undefined The main loop of the game. This function is called continually by the p5.js library. Kind : global function Returns : undefined - No return value","title":"Main"},{"location":"sketch.js/#draw-undefined","text":"The main loop of the game. This function is called continually by the p5.js library. Kind : global function Returns : undefined - No return value","title":"draw() \u21d2 undefined"}]}